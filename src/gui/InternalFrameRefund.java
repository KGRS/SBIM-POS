/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import backendcontrollers.GrnController;
import backendcontrollers.OrderDetailController;
import backendcontrollers.OrderItemController;
import backendcontrollers.RefundController;
import functions.DateFormat;
import functions.DocCodeGenarate;
import functions.Information;
import functions.UpdateQuentities;
import functions.Validator;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import model.BinCard;
import model.OrderDetail;
import model.OrderItems;
import model.Refund;
import model.RefundItems;

/**
 *
 * @author Sameera
 */
public class InternalFrameRefund extends javax.swing.JInternalFrame {

    /**
     * Creates new form InternalFrameRefund
     */
    private final DefaultTableModel tableModel;
    public static String orderId;
    public static String billTotal = "0.00";
    public double RefundTotal = 0.00;

    public InternalFrameRefund() {
        initComponents();

        tableModel = (DefaultTableModel) tblOrderItems.getModel();
        tableModel.setRowCount(0);

        DefaultTableCellRenderer cellRenderer = new DefaultTableCellRenderer();

        cellRenderer.setHorizontalAlignment(JLabel.RIGHT);

        tblOrderItems.getColumnModel().getColumn(2).setCellRenderer(cellRenderer);
        tblOrderItems.getColumnModel().getColumn(3).setCellRenderer(cellRenderer);
        tblOrderItems.getColumnModel().getColumn(4).setCellRenderer(cellRenderer);

        itemSearchKeyRegister();

        txtInvoiceNo.setText(this.orderId);
        lblBillTotal.setText(this.billTotal);
        getRefundTotal(orderId);
        lblRefundTotal.setText(this.RefundTotal + "");
        this.searchOrder(orderId);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        txtInvoiceNo = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblOrderItems = new javax.swing.JTable();
        btnAddToOrder = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        btnSelectAll = new javax.swing.JButton();
        lblBillTotal = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        lblRefundTotal = new javax.swing.JLabel();

        setIconifiable(true);
        setTitle("Refunds");

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setText("Bill No :");

        txtInvoiceNo.setEditable(false);
        txtInvoiceNo.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        txtInvoiceNo.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        tblOrderItems.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tblOrderItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Item Code", "item Name", "Qty", "Selling Price", "Total", "Refund", "Reason"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblOrderItems.setRowHeight(20);
        tblOrderItems.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblOrderItemsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblOrderItems);

        btnAddToOrder.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnAddToOrder.setForeground(new java.awt.Color(0, 51, 153));
        btnAddToOrder.setText("REFUND SELECTED ITEMS");
        btnAddToOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddToOrderActionPerformed(evt);
            }
        });

        btnCancel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnCancel.setForeground(new java.awt.Color(0, 51, 153));
        btnCancel.setText("CANCEL");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(153, 153, 255));
        jLabel2.setFont(new java.awt.Font("Courier New", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Items To Refund");
        jLabel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabel2.setOpaque(true);

        btnSelectAll.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSelectAll.setForeground(new java.awt.Color(0, 51, 153));
        btnSelectAll.setText("SELECT ALL");
        btnSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectAllActionPerformed(evt);
            }
        });

        lblBillTotal.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblBillTotal.setText("0.00");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setText("Bill Total        :");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setText("Refund Total :");

        lblRefundTotal.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblRefundTotal.setText("0.00");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 895, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 875, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtInvoiceNo, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSelectAll, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(lblBillTotal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblRefundTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAddToOrder)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jLabel2)
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtInvoiceNo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnSelectAll, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 20, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblBillTotal, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                            .addComponent(lblRefundTotal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAddToOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(32, 32, 32))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblOrderItemsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblOrderItemsMouseClicked
        // TODO add your handling code here:
        int selectedRow = tblOrderItems.getSelectedRow();
        if (tblOrderItems.isRowSelected(selectedRow)) {
            Boolean isRefunded = (Boolean) tableModel.getValueAt(selectedRow, 5);
            if (!isRefunded) {

                calculateRefundAmount(-Double.parseDouble(tableModel.getValueAt(selectedRow, 4).toString()));
            } else {
                calculateRefundAmount(Double.parseDouble(tableModel.getValueAt(selectedRow, 4).toString()));
            }
        }
        if (Double.parseDouble(lblBillTotal.getText()) == this.RefundTotal) {
            btnSelectAll.setEnabled(false);
        } else {
            btnSelectAll.setEnabled(true);
        }
    }//GEN-LAST:event_tblOrderItemsMouseClicked

    private void btnAddToOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddToOrderActionPerformed
        // TODO add your handling code here:
        if (tableModel.getRowCount() > 0) {
            if (this.RefundTotal <= 0) {
                JOptionPane.showMessageDialog(this, "No Items to refund.Please select item(s) to refund", "No item selected", JOptionPane.INFORMATION_MESSAGE);
            } else {

                int confirm = JOptionPane.showConfirmDialog(this, "Do you want to return selected item(s)?", "Confirm", JOptionPane.YES_NO_OPTION);

                if (confirm == 0) {
                    refundItems();
                    getRefundTotal(orderId);
                    this.searchOrder(orderId);
                }

            }
        } else {
            JOptionPane.showMessageDialog(this, "No Item(s) found in order", "No item found", JOptionPane.INFORMATION_MESSAGE);
        }

    }//GEN-LAST:event_btnAddToOrderActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        if (FormMain.searchOrder != null) {
            if (!FormMain.searchOrder.isVisible()) {
                FormMain.searchOrder.setVisible(true);
                this.dispose();
            }
        }

    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectAllActionPerformed
        // TODO add your handling code here:
        String text = btnSelectAll.getText();
        if (text.equals("SELECT ALL")) {
            btnSelectAll.setText("UNSELECT ALL");
            int rowCount = tableModel.getRowCount();
            for (int i = 0; i < rowCount; i++) {
                Boolean isSelected = (Boolean) tableModel.getValueAt(i, 5);
                if (isSelected == null) {
                    isSelected = false;
                }
                if (!isSelected) {
                    tableModel.setValueAt(true, i, 5);
                    calculateRefundAmount(Double.parseDouble(tableModel.getValueAt(i, 4).toString()));
                }

            }
        } else {
            btnSelectAll.setText("SELECT ALL");
            int rowCount = tableModel.getRowCount();
            for (int i = 0; i < rowCount; i++) {
                Boolean isSelected = (Boolean) tableModel.getValueAt(i, 5);
                if (isSelected == null) {
                    isSelected = false;
                }
                if (isSelected) {
                    tableModel.setValueAt(false, i, 5);
                    calculateRefundAmount(-Double.parseDouble(tableModel.getValueAt(i, 4).toString()));
                }
            }
        }
    }//GEN-LAST:event_btnSelectAllActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddToOrder;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnSelectAll;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBillTotal;
    private javax.swing.JLabel lblRefundTotal;
    private javax.swing.JTable tblOrderItems;
    public static javax.swing.JTextField txtInvoiceNo;
    // End of variables declaration//GEN-END:variables

    private void itemSearchKeyRegister() {
        AbstractAction selectAction = new AbstractAction("") {

            @Override
            public void actionPerformed(ActionEvent ae) {

                tblOrderItems.requestFocus();
                tblOrderItems.setRowSelectionInterval(0, 0);

            }
        };
        AbstractAction searchAction = new AbstractAction("") {

            @Override
            public void actionPerformed(ActionEvent ae) {

                txtInvoiceNo.requestFocus();
                txtInvoiceNo.selectAll();

            }
        };

        tblOrderItems.registerKeyboardAction(selectAction, KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, 0), JComponent.WHEN_IN_FOCUSED_WINDOW);
        tblOrderItems.registerKeyboardAction(searchAction, KeyStroke.getKeyStroke(KeyEvent.VK_F5, 0), JComponent.WHEN_IN_FOCUSED_WINDOW);
    }

    private void searchOrder(String orderId) {
        tableModel.setRowCount(0);
        try {
            OrderDetail od = new OrderDetail();
            od.setOrderID(orderId);
            ArrayList<OrderItems> searchOrders = OrderItemController.findThisOrder(orderId);
            if (searchOrders.size() > 0) {
                for (OrderItems item : searchOrders) {

                    tableModel.addRow(new Object[]{item.getItemCode(), item.getItemName(), Validator.BuildTwoDecimals(item.getItemQty()), Validator.BuildTwoDecimals(item.getItemPrice() - item.getItemDiscount()),
                        Validator.BuildTwoDecimals(item.getTotalValueWithDiscount())});

                }
                TableColumn returnTypeColumn = tblOrderItems.getColumnModel().getColumn(6);
                JComboBox combo = new JComboBox();

                combo.addItem("Size difference");
                combo.addItem("Damage");

                returnTypeColumn.setCellEditor(new DefaultCellEditor(combo));
                combo.setSelectedIndex(0);
            } else {
                JOptionPane.showMessageDialog(null, "No item(s) found..", "No items", JOptionPane.INFORMATION_MESSAGE);
                this.dispose();
            }

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(InternalFrameRefund.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(InternalFrameRefund.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void calculateRefundAmount(double amount) {
        this.RefundTotal += amount;
        lblRefundTotal.setText(Validator.BuildTwoDecimals(this.RefundTotal));
    }

    private void refundItems() {

        try {
            OrderItems items = null;
            RefundItems refundItems = null;
            BinCard binCard = null;

            Refund refund = new Refund();
            String refund_id = DocCodeGenarate.getCode("REF");
            refund.setRefund_id(refund_id);
            refund.setRefund_amount(RefundTotal);
            refund.setRefund_date(FormMain.lblDate.getText());
            refund.setRefund_from(this.orderId);
            refund.setRefund_user(Information.intilzeInformation().getUserID());
            refund.setRefund_cashierPoint(Information.intilzeInformation().getLocation_code());

            RefundController.insertRefundDetail(refund);

            for (int i = 0; i < tableModel.getRowCount(); i++) {
                Boolean isSelected = (Boolean) tableModel.getValueAt(i, 5);
                if (isSelected == null) {
                    isSelected = false;
                }
                if (isSelected) {
                    items = new OrderItems();
                    String itemCode = tableModel.getValueAt(i, 0).toString();
                    String itemName = tableModel.getValueAt(i, 1).toString();

                    double qty = Double.parseDouble(tableModel.getValueAt(i, 2).toString());
                    double selPrice = Double.parseDouble(tableModel.getValueAt(i, 3).toString());
                    String reason = tableModel.getValueAt(i, 6) == null ? "Size difference" : tableModel.getValueAt(i, 6).toString();
                    items.setItemCode(itemCode);
                    items.setOrderId(this.orderId);
                    items.setItemPrice(Double.parseDouble(tableModel.getValueAt(i, 3).toString()));
                    items.setItemStatus(2);
                    items.setTrn_date(FormMain.lblDate.getText());
                    OrderItemController.updateRefundItems(items);
                    UpdateQuentities.updateItemQuantities(itemCode, -(Double.parseDouble(tableModel.getValueAt(i, 2).toString())));

                    refundItems = new RefundItems();
                    refundItems.setRefund_id(refund_id);
                    refundItems.setItemCode(itemCode);
                    refundItems.setDescription(itemName);
                    refundItems.setQty(qty);
                    refundItems.setSellingPrice(selPrice);
                    refundItems.setTotal(qty * selPrice);
                    refundItems.setReason(itemCode);
                    refundItems.setReason(reason);
                    RefundController.insertRefundItems(refundItems);

                    binCard = new BinCard();
                    binCard.setRecivedID(refund_id);
                    binCard.setDate(FormMain.lblDate.getText());
                    binCard.setTime(DateFormat.getTime(getCurrentTime()));
                    binCard.setRecivedQty(Double.parseDouble(tableModel.getValueAt(i, 2).toString()));
                    binCard.setIssueTo("-");
                    binCard.setItemCode(tableModel.getValueAt(i, 0).toString());
                    binCard.setLocation(Information.intilzeInformation().getLocation_code());
                    binCard.setStockEditID("-");
                    binCard.setIssueId("-");
                    binCard.setRecivedFrom(orderId);

                    GrnController.insertDataToBinCard(binCard, 1);
                }
            }
            OrderDetail od = new OrderDetail();
            if (this.RefundTotal == Double.parseDouble(this.billTotal)) {

                od.setOrderStatus(3);
                od.setOrderID(orderId);
                od.setRefundTotal(this.RefundTotal);
                int setOrderStatus = OrderDetailController.setOrderStatus(od);
                if (setOrderStatus == 1) {
                    JOptionPane.showMessageDialog(this, "Item Refund Successful and order totally refunded..", "Refund Successful", JOptionPane.INFORMATION_MESSAGE);
                }
            } else if (this.RefundTotal < Double.parseDouble(this.billTotal)) {

                od.setOrderStatus(2);
                od.setOrderID(orderId);
                od.setRefundTotal(this.RefundTotal);
                int setOrderStatus = OrderDetailController.setOrderStatus(od);
                if (setOrderStatus == 1) {
                    JOptionPane.showMessageDialog(this, "Item Refund Successful and order patilly refunded ..", "Refund Successful", JOptionPane.INFORMATION_MESSAGE);
                }
            }

        } catch (SQLException ex) {
            Logger.getLogger(InternalFrameRefund.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(InternalFrameRefund.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(InternalFrameRefund.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void getRefundTotal(String orderId) {
        try {
            this.RefundTotal = OrderItemController.getRefundTotalForThisOrder(orderId);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(InternalFrameRefund.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(InternalFrameRefund.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public String getCurrentTime(){
        SimpleDateFormat inFormat = new SimpleDateFormat("hh:mm:ss aa");
        String time = inFormat.format(new Date());
        return time;
    }

}
