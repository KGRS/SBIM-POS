/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import backendcontrollers.ClientDetailController;
import backendcontrollers.ItemController;
import functions.CheckingSingleQuote;
import functions.Information;
import functions.ReadConfig;
import functions.Validator;
import information.Informations;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import model.Client;
import model.Item;

/**
 *
 * @author Sameera
 */
public class FormBilling extends javax.swing.JDialog {

    /**
     * Creates new form FormBilling
     */
    public static Item item = null;
    public static DefaultTableModel tableModel;
    public static double subTotal = 0.00;
    public static double grandTotal = 0.00;
    public static double discount = 0.00;
    public static String discount_remark = null;
    private HashMap<Integer, ArrayList<Object[]>> holdOrderMap = new HashMap<Integer, ArrayList<Object[]>>();
    public static HashMap<Integer, String> itemDiscountRemarkMap = new HashMap<Integer, String>();
    private int holdOrder_no = 1;

    private int selectedHoldOrder_no;

    Information information;

    private double itemDiscount;

    public int getSelectedHoldOrder_no() {
        return selectedHoldOrder_no;
    }

    public void setSelectedHoldOrder_no(int selectedHoldOrder_no) {
        this.selectedHoldOrder_no = selectedHoldOrder_no;
    }

    public FormBilling(java.awt.Frame parent, boolean modal) {
        super(parent, modal);

        initComponents();
        this.itemDiscount = 0.00;
        information = new Information();

        tableModel = (DefaultTableModel) tblItemCart.getModel();
        DefaultTableCellRenderer cellRenderer = new DefaultTableCellRenderer();

        cellRenderer.setHorizontalAlignment(JLabel.RIGHT);

        tblItemCart.getColumnModel().getColumn(2).setCellRenderer(cellRenderer);
        tblItemCart.getColumnModel().getColumn(3).setCellRenderer(cellRenderer);
        tblItemCart.getColumnModel().getColumn(4).setCellRenderer(cellRenderer);
        tblItemCart.getColumnModel().getColumn(5).setCellRenderer(cellRenderer);

        Toolkit tk = Toolkit.getDefaultToolkit();
        Dimension d = tk.getScreenSize();
        System.out.println("Screen width = " + d.width);
        System.out.println("Screen height = " + d.height);
        this.setSize(d);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblClientName = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblTime = new javax.swing.JLabel();
        lblUser = new javax.swing.JLabel();
        lblLogoff = new javax.swing.JLabel();
        pnlMain = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        txtItemCode = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        btnEnter = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblItemCart = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        txtSubTotal = new javax.swing.JTextField();
        txtDiscount = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtGrandTotal = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtQty = new javax.swing.JTextField();
        btnNewOrder = new javax.swing.JButton();
        btnDiscount = new javax.swing.JButton();
        btnDeleteLine = new javax.swing.JButton();
        btnPayment = new javax.swing.JButton();
        btnEnter1 = new javax.swing.JButton();
        txtItemPrice = new javax.swing.JFormattedTextField();
        btnOnhold = new javax.swing.JButton();
        btnGetFromHold = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        lblClientName.setBackground(new java.awt.Color(153, 153, 255));
        lblClientName.setFont(new java.awt.Font("Courier New", 1, 36)); // NOI18N
        lblClientName.setForeground(new java.awt.Color(255, 255, 255));
        lblClientName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblClientName.setText("Sameera Food City");
        lblClientName.setOpaque(true);

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setFont(new java.awt.Font("Serif", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 51, 153));
        jLabel1.setText("Date :");

        lblDate.setFont(new java.awt.Font("Serif", 1, 25)); // NOI18N
        lblDate.setForeground(new java.awt.Color(204, 0, 102));
        lblDate.setText("yyyy-MM-dd");

        jLabel3.setFont(new java.awt.Font("Serif", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 51, 153));
        jLabel3.setText("Time :");

        lblTime.setFont(new java.awt.Font("Serif", 1, 25)); // NOI18N
        lblTime.setForeground(new java.awt.Color(204, 0, 102));
        lblTime.setText("HH:mm:ss");

        lblUser.setFont(new java.awt.Font("Serif", 1, 18)); // NOI18N
        lblUser.setForeground(new java.awt.Color(0, 51, 153));
        lblUser.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblUser.setText("Sameera");

        lblLogoff.setBackground(new java.awt.Color(255, 255, 255));
        lblLogoff.setFont(new java.awt.Font("Andalus", 0, 18)); // NOI18N
        lblLogoff.setForeground(new java.awt.Color(0, 51, 153));
        lblLogoff.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLogoff.setText("<html><U>Exit</html>");
        lblLogoff.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0),"Esc");

        lblLogoff.getActionMap().put("Esc", new AbstractAction() {

            @Override
            public void actionPerformed(ActionEvent e) {
                exit();
            }
        });
        lblLogoff.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblLogoffMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblLogoffMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblLogoffMouseExited(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblLogoff, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(5, 5, 5)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblTime, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblUser, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblLogoff, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(2, 2, 2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlMain.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("Code :");

        txtItemCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtItemCodeActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setText("Price :");

        btnEnter.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnEnter.setForeground(new java.awt.Color(0, 51, 153));
        btnEnter.setText("ENTER");
        btnEnter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnterActionPerformed(evt);
            }
        });

        tblItemCart.setAutoCreateRowSorter(true);
        tblItemCart.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tblItemCart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Item Code", "Description", "Quantity", "Unit Price", "Discount", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblItemCart.setDoubleBuffered(true);
        tblItemCart.setRowHeight(30);
        tblItemCart.getTableHeader().setReorderingAllowed(false);
        tblItemCart.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblItemCartMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblItemCart);

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 51, 153));
        jLabel9.setText("Sub Total     :");

        txtSubTotal.setEditable(false);
        txtSubTotal.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        txtSubTotal.setForeground(new java.awt.Color(102, 0, 0));
        txtSubTotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtSubTotal.setText("2000.00");

        txtDiscount.setEditable(false);
        txtDiscount.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        txtDiscount.setForeground(new java.awt.Color(102, 0, 0));
        txtDiscount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtDiscount.setText("200.00");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 51, 153));
        jLabel10.setText("Discount      : ");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 51, 153));
        jLabel11.setText("Grand Total :");

        txtGrandTotal.setEditable(false);
        txtGrandTotal.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        txtGrandTotal.setForeground(new java.awt.Color(102, 0, 0));
        txtGrandTotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtGrandTotal.setText("1800.00");

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel12.setText("Qty  :");

        txtQty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQtyActionPerformed(evt);
            }
        });
        txtQty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtQtyKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtQtyKeyTyped(evt);
            }
        });

        btnNewOrder.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        btnNewOrder.setForeground(new java.awt.Color(0, 51, 153));
        btnNewOrder.setText("F5-New Invoice");
        btnNewOrder.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_F5,0),"F5");

        btnNewOrder.getActionMap().put("F5", new AbstractAction() {

            @Override
            public void actionPerformed(ActionEvent e) {
                btnNewOrder.doClick();
            }
        });
        btnNewOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewOrderActionPerformed(evt);
            }
        });

        btnDiscount.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        btnDiscount.setForeground(new java.awt.Color(0, 51, 153));
        btnDiscount.setText("F2-Discount");
        btnDiscount.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_F2,0),"F2");

        btnDiscount.getActionMap().put("F2", new AbstractAction() {

            @Override
            public void actionPerformed(ActionEvent e) {
                btnDiscount.doClick();
            }
        });
        btnDiscount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDiscountActionPerformed(evt);
            }
        });

        btnDeleteLine.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        btnDeleteLine.setForeground(new java.awt.Color(0, 51, 153));
        btnDeleteLine.setText("DEL-Delete Line");
        btnDeleteLine.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_DELETE,0),"delete");

        btnDeleteLine.getActionMap().put("delete", new AbstractAction() {

            @Override
            public void actionPerformed(ActionEvent e) {
                btnDeleteLine.doClick();
            }
        });
        btnDeleteLine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteLineActionPerformed(evt);
            }
        });

        btnPayment.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        btnPayment.setForeground(new java.awt.Color(0, 51, 153));
        btnPayment.setText("F1-Payment");
        btnPayment.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_F1,0),"F1");

        btnPayment.getActionMap().put("F1", new AbstractAction() {

            @Override
            public void actionPerformed(ActionEvent e) {
                btnPayment.doClick();
            }
        });
        btnPayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPaymentActionPerformed(evt);
            }
        });

        btnEnter1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnEnter1.setForeground(new java.awt.Color(0, 51, 153));
        btnEnter1.setText("F8-SEARCH");
        btnEnter1.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_F8,0),"F8");

        btnEnter1.getActionMap().put("F8", new AbstractAction() {

            @Override
            public void actionPerformed(ActionEvent e) {
                btnEnter1.doClick();
            }
        });
        btnEnter1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnter1ActionPerformed(evt);
            }
        });

        txtItemPrice.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        txtItemPrice.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtItemPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtItemPriceActionPerformed(evt);
            }
        });
        txtItemPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtItemPriceKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtItemPriceKeyTyped(evt);
            }
        });

        btnOnhold.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        btnOnhold.setForeground(new java.awt.Color(0, 51, 153));
        btnOnhold.setText("F6-On Hold");
        btnOnhold.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_F6,0),"F6");

        btnOnhold.getActionMap().put("F6", new AbstractAction() {

            @Override
            public void actionPerformed(ActionEvent e) {
                btnOnhold.doClick();
            }
        });
        btnOnhold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOnholdActionPerformed(evt);
            }
        });

        btnGetFromHold.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        btnGetFromHold.setForeground(new java.awt.Color(0, 51, 153));
        btnGetFromHold.setText("F7-get From Hold");
        btnGetFromHold.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_F7,0),"F7");

        btnGetFromHold.getActionMap().put("F7", new AbstractAction() {

            @Override
            public void actionPerformed(ActionEvent e) {
                btnGetFromHold.doClick();
            }
        });
        btnGetFromHold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetFromHoldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlMainLayout = new javax.swing.GroupLayout(pnlMain);
        pnlMain.setLayout(pnlMainLayout);
        pnlMainLayout.setHorizontalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtItemCode, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9)
                        .addComponent(txtItemPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtQty, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnEnter, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEnter1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnNewOrder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnDeleteLine, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlMainLayout.createSequentialGroup()
                                .addComponent(btnOnhold, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                                .addGap(10, 10, 10)
                                .addComponent(btnDiscount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(pnlMainLayout.createSequentialGroup()
                                .addComponent(btnGetFromHold, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(btnPayment, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainLayout.createSequentialGroup()
                                .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtSubTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainLayout.createSequentialGroup()
                                .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtGrandTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainLayout.createSequentialGroup()
                                .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(15, 15, 15))
        );

        pnlMainLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnDeleteLine, btnDiscount, btnNewOrder, btnOnhold, btnPayment});

        pnlMainLayout.setVerticalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtQty, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlMainLayout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtItemPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                        .addComponent(txtItemCode, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnEnter, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnEnter1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(11, 11, 11)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                        .addGap(20, 20, 20)
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtSubTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtGrandTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnNewOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnOnhold, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnDeleteLine, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnGetFromHold, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(1, 1, 1)))
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblClientName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlMain, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(lblClientName)
                .addGap(2, 2, 2)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lblLogoffMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblLogoffMouseClicked
        exit();
    }//GEN-LAST:event_lblLogoffMouseClicked

    private void lblLogoffMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblLogoffMouseEntered
        lblLogoff.setForeground(Color.RED);
    }//GEN-LAST:event_lblLogoffMouseEntered

    private void lblLogoffMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblLogoffMouseExited
        lblLogoff.setForeground(Color.BLUE);
    }//GEN-LAST:event_lblLogoffMouseExited

    private void txtItemCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtItemCodeActionPerformed
        try {
            // TODO add your handling code here:

            searchItem();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FormBilling.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(FormBilling.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtItemCodeActionPerformed

    private void btnEnterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnterActionPerformed
        // TODO add your handling code here:
        if (!txtItemCode.getText().isEmpty() && !txtItemPrice.getText().isEmpty() && !txtQty.getText().isEmpty()) {
            addToCart();
        }
    }//GEN-LAST:event_btnEnterActionPerformed

    private void tblItemCartMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblItemCartMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) {
            int selectedRow = tblItemCart.getSelectedRow();
            if (tblItemCart.getSelectedColumn() == 4) {
                FormAuthorization auth = new FormAuthorization(null, true, "IWD");//
                auth.setLocationRelativeTo(this);
                auth.setVisible(true);
                if (auth.isConfirm) {
                    FormDiscount discount = new FormDiscount(null, true, true);
                    double qty = Double.parseDouble(Validator.BuildTwoDecimals(Double.parseDouble(tblItemCart.getValueAt(selectedRow, 2).toString())));
                    double price = Double.parseDouble(Validator.BuildTwoDecimals(Double.parseDouble(tblItemCart.getValueAt(selectedRow, 3).toString())));
                    double itemDiscount = Double.parseDouble(Validator.BuildTwoDecimals(Double.parseDouble(tblItemCart.getValueAt(selectedRow, 4).toString())));
                    discount.subTotal = qty * price;
                    this.grandTotal += itemDiscount;
                    this.subTotal += itemDiscount;
                    discount.selectedRow = selectedRow;
                    discount.setLocationRelativeTo(null);
                    discount.setVisible(true);
                }
            } else {
                if (tblItemCart.isRowSelected(selectedRow)) {
                    try {
                        String itemCode = tblItemCart.getValueAt(selectedRow, 0).toString();
                        double price = Double.parseDouble(Validator.BuildTwoDecimals(Double.parseDouble(tblItemCart.getValueAt(selectedRow, 3).toString())));
                        double qty = Double.parseDouble(Validator.BuildTwoDecimals(Double.parseDouble(tblItemCart.getValueAt(selectedRow, 2).toString())));
                        double total = Double.parseDouble(Validator.BuildTwoDecimals(Double.parseDouble(tblItemCart.getValueAt(selectedRow, 5).toString())));
                        this.itemDiscount = Double.parseDouble(Validator.BuildTwoDecimals(Double.parseDouble(tblItemCart.getValueAt(selectedRow, 4).toString())))/qty;
                       
                        double sellingPrice = price - this.itemDiscount;
                        
                        txtItemCode.setText(itemCode);
                        txtItemPrice.setText(sellingPrice +"");
                        txtQty.setText(qty + "");
                        searchItem();
                        tableModel.removeRow(selectedRow);
                        //                this.subTotal += (-total);
                        //                this.grandTotal = (this.subTotal - discount);
                        //                txtSubTotal.setText(Validator.BuildTwoDecimals(this.subTotal) + "");
                        //                txtGrandTotal.setText(Validator.BuildTwoDecimals(this.grandTotal) + "");
                        calculateTotal(-total);
                        txtQty.requestFocus();
                        txtQty.selectAll();
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(FormBilling.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (SQLException ex) {
                        Logger.getLogger(FormBilling.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
    }//GEN-LAST:event_tblItemCartMouseClicked

    private void txtQtyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtQtyActionPerformed
        // TODO add your handling code here:
        if (!txtItemCode.getText().isEmpty() && !txtItemPrice.getText().isEmpty() && !txtQty.getText().isEmpty()) {
            calculateDiscountForItem();
            this.addToCart();
        }
    }//GEN-LAST:event_txtQtyActionPerformed

    private void txtQtyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQtyKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtQtyKeyReleased

    private void txtQtyKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQtyKeyTyped
        // TODO add your handling code here:
        Validator.DigitsValitor(evt);
    }//GEN-LAST:event_txtQtyKeyTyped

    private void btnNewOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewOrderActionPerformed
        // TODO add your handling code here:
        resetAll();
    }//GEN-LAST:event_btnNewOrderActionPerformed

    private void btnDiscountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDiscountActionPerformed
        // TODO add your handling code here:

        if (this.subTotal > 0) {
            FormAuthorization auth = new FormAuthorization(null, true, "DIS");
            auth.setLocationRelativeTo(this);
            auth.setVisible(true);
            if (auth.isConfirm) {
                FormDiscount discount = new FormDiscount(null, true, false);
                discount.subTotal = this.subTotal;
                discount.setLocationRelativeTo(null);
                discount.setVisible(true);
            }
        } else {
            JOptionPane.showMessageDialog(null, "No bill found for discount", "cannot proceed", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnDiscountActionPerformed

    private void btnDeleteLineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteLineActionPerformed
        // TODO add your handling code here:
        deleteLine();
    }//GEN-LAST:event_btnDeleteLineActionPerformed

    private void btnPaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPaymentActionPerformed
        // TODO add your handling code here:
        if (tableModel.getRowCount() > 0) {
            if (ReadConfig.customerDetailAtPayment == 1) {
                FormNewCustomer customer = new FormNewCustomer(null, true, true);
                customer.setLocationRelativeTo(this);
                customer.setVisible(true);
            }
            setDetailToPayment();
        } else {
            JOptionPane.showMessageDialog(null, "First create new invocie to payment", "No invoice created", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnPaymentActionPerformed

    private void btnEnter1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnter1ActionPerformed
        // TODO add your handling code here:

        FormItemSearch search = new FormItemSearch(null, true, true);
        search.setLocationRelativeTo(null);
        search.setVisible(true);
    }//GEN-LAST:event_btnEnter1ActionPerformed

    private void txtItemPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtItemPriceActionPerformed
        // TODO add your handling code here:
        
        txtQty.setText("1.00");
        txtQty.selectAll();
        txtQty.requestFocus();
    }//GEN-LAST:event_txtItemPriceActionPerformed

    private void txtItemPriceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtItemPriceKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtItemPriceKeyReleased

    private void txtItemPriceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtItemPriceKeyTyped
        // TODO add your handling code here:
        Validator.DigitsValitor(evt);
    }//GEN-LAST:event_txtItemPriceKeyTyped

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        try {
            // TODO add your handling code here:
            String greating;
            Calendar calendar = Calendar.getInstance();
            int hour = calendar.get(Calendar.HOUR_OF_DAY);
            if (hour >= 0 && hour < 12) {
                greating = "Hi..Good Morning ! ";
            } else if (hour >= 12 && hour < 16) {
                greating = "Hi.. Good Afternoon ! ";
            } else {
                greating = "Hi..Good Evening ! ";
            }

            Client client = ClientDetailController.getClientDetail();
            if (client != null) {
                lblClientName.setText(client.getClientName());
            } else {
                lblClientName.setText("Client Name");
            }
            lblUser.setText(greating + " " + Information.intilzeInformation().getUserName());
            Informations.setTimeAnd_date();
            tableModel.setRowCount(0);
            txtSubTotal.setText(Validator.BuildTwoDecimals(FormBilling.subTotal));
            txtGrandTotal.setText(Validator.BuildTwoDecimals(FormBilling.grandTotal));
            txtDiscount.setText(Validator.BuildTwoDecimals(FormBilling.discount));
            if (ReadConfig.isPriceEdit == 0) {
                txtItemPrice.setEditable(false);
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FormBilling.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(FormBilling.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowOpened

    private void btnOnholdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOnholdActionPerformed
        // TODO add your handling code here:
        if (tableModel.getRowCount() > 0) {
            holdCurrentOrder();
        } else {
            JOptionPane.showMessageDialog(null, "No order found for hold..", "No invoice created", JOptionPane.INFORMATION_MESSAGE);
        }

    }//GEN-LAST:event_btnOnholdActionPerformed

    private void btnGetFromHoldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetFromHoldActionPerformed
        // TODO add your handling code here:
        retrieveHoldingOrders();
    }//GEN-LAST:event_btnGetFromHoldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormBilling.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormBilling.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormBilling.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormBilling.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FormBilling dialog = new FormBilling(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeleteLine;
    private javax.swing.JButton btnDiscount;
    private javax.swing.JButton btnEnter;
    private javax.swing.JButton btnEnter1;
    private javax.swing.JButton btnGetFromHold;
    private javax.swing.JButton btnNewOrder;
    private javax.swing.JButton btnOnhold;
    private javax.swing.JButton btnPayment;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblClientName;
    public static javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblLogoff;
    public static javax.swing.JLabel lblTime;
    private javax.swing.JLabel lblUser;
    private javax.swing.JPanel pnlMain;
    public static javax.swing.JTable tblItemCart;
    public static javax.swing.JTextField txtDiscount;
    public static javax.swing.JTextField txtGrandTotal;
    public static javax.swing.JTextField txtItemCode;
    public static javax.swing.JFormattedTextField txtItemPrice;
    public static javax.swing.JTextField txtQty;
    public static javax.swing.JTextField txtSubTotal;
    // End of variables declaration//GEN-END:variables

    private void searchItem() throws ClassNotFoundException, SQLException {

        String itemCode = CheckingSingleQuote.checkSingleQuote(txtItemCode.getText().trim());
        item = ItemController.getItem_ByItemCode("ItemCode", itemCode);
        double sellingPrice = 0;
        if (item != null) {
            double selling_margin = item.getSelling_margin();
            if (selling_margin > 0) {
                sellingPrice = item.getSellingPrice() - (item.getSellingPrice() * selling_margin / 100);
            } else {
                sellingPrice = item.getSellingPrice();
            }
            txtItemPrice.setText(Validator.BuildTwoDecimals(sellingPrice));
            if (ReadConfig.isPriceEdit == 1) {
                txtItemPrice.requestFocus();
                txtItemPrice.selectAll();
            } else {
                FormBilling.txtQty.setText("1");
                FormBilling.txtQty.requestFocus();
                FormBilling.txtQty.selectAll();
            }

        } else {
            JOptionPane.showMessageDialog(null, "This ItemCode can not find in database..");
            txtItemCode.setText("");
            txtItemPrice.setText("");
            txtQty.setText("");
        }
    }

    private void addToCart() {
        String itemCode = item.getItemCode();
        String itemName = item.getDescription();
        double qty = Double.parseDouble(txtQty.getText());
        double sellPrice = 0;
        if (this.itemDiscount <= 0) {
            sellPrice = Double.parseDouble(Validator.BuildTwoDecimals(Double.parseDouble(txtItemPrice.getText().trim())));
        } else {
            sellPrice = item.getSellingPrice();
        }

        double total = 0;
        if (qty > item.getQuantity()) {
            if (item.getMinusSell().equalsIgnoreCase("Yes")) {
                Object[] dopriceAndItemCodeExist = dopriceAndItemCodeExist(itemCode, Validator.BuildTwoDecimals(sellPrice) + "");
                if ((Boolean) dopriceAndItemCodeExist[0]) {  // item code a does exist 
                    if ((Integer) dopriceAndItemCodeExist[1] != -1) {//price also exsist
                        total = sellPrice * qty;
                        qty += Double.parseDouble(tableModel.getValueAt((Integer) dopriceAndItemCodeExist[1], 2).toString());
                        double discount = Double.parseDouble(tableModel.getValueAt((Integer) dopriceAndItemCodeExist[1], 4).toString());
                        double newTotal = (sellPrice * qty) - discount;
                        tableModel.setValueAt(Validator.BuildTwoDecimals(qty), (Integer) dopriceAndItemCodeExist[1], 2);
                        tableModel.setValueAt(Validator.BuildTwoDecimals(newTotal), (Integer) dopriceAndItemCodeExist[1], 5);
                    } else {
                        total = (sellPrice * qty) - this.itemDiscount;
                        Object ob[] = {itemCode, itemName, Validator.BuildTwoDecimals(qty), Validator.BuildTwoDecimals(sellPrice), Validator.BuildTwoDecimals(this.itemDiscount), Validator.BuildTwoDecimals(total)};
                        tableModel.addRow(ob);
                    }
                } else {
                    total = sellPrice * qty;
                    Object ob[] = {itemCode, itemName, Validator.BuildTwoDecimals(qty), Validator.BuildTwoDecimals(sellPrice), Validator.BuildTwoDecimals(this.itemDiscount), Validator.BuildTwoDecimals(total)};
                    tableModel.addRow(ob);
                }
//                this.subTotal += total;
//                this.grandTotal += total;
//                txtSubTotal.setText(Validator.BuildTwoDecimals(this.subTotal) + "");
//                txtGrandTotal.setText(Validator.BuildTwoDecimals(this.grandTotal) + "");
//                txtItemCode.setText("");
//                txtItemPrice.setText("");
//                txtQty.setText("");
//                txtItemCode.requestFocus();

            } else {
                JOptionPane.showMessageDialog(null, "<html>Cannot proceed with this quantity.<br>Because stock quantity is " + item.getQuantity() + "</html>", "Action cannot complete ", JOptionPane.WARNING_MESSAGE);
                txtQty.requestFocus();
                txtQty.selectAll();
            }
        } else {
            Object[] dopriceAndItemCodeExist = dopriceAndItemCodeExist(itemCode, Validator.BuildTwoDecimals(sellPrice) + "");
            if ((Boolean) dopriceAndItemCodeExist[0]) {  // item code a does exist 
                if ((Integer) dopriceAndItemCodeExist[1] != -1) {//price also exsist
                    total = sellPrice * qty;
                    qty += Double.parseDouble(tableModel.getValueAt((Integer) dopriceAndItemCodeExist[1], 2).toString());
                    double discount = Double.parseDouble(tableModel.getValueAt((Integer) dopriceAndItemCodeExist[1], 4).toString());
                    double newTotal = (sellPrice * qty) - discount;
                    tableModel.setValueAt(Validator.BuildTwoDecimals(qty), (Integer) dopriceAndItemCodeExist[1], 2);
                    tableModel.setValueAt(Validator.BuildTwoDecimals(newTotal), (Integer) dopriceAndItemCodeExist[1], 5);
                } else {
                    total = (sellPrice * qty) - this.itemDiscount;
                    Object ob[] = {itemCode, itemName, Validator.BuildTwoDecimals(qty), Validator.BuildTwoDecimals(sellPrice), Validator.BuildTwoDecimals(this.itemDiscount), Validator.BuildTwoDecimals(total)};
                    tableModel.addRow(ob);
                }
            } else {
                total = (sellPrice * qty) - this.itemDiscount;
                Object ob[] = {itemCode, itemName, Validator.BuildTwoDecimals(qty), Validator.BuildTwoDecimals(sellPrice), Validator.BuildTwoDecimals(this.itemDiscount), Validator.BuildTwoDecimals(total)};
                tableModel.addRow(ob);
            }

        }
        calculateTotal(total);
        txtItemCode.setText("");
        txtItemPrice.setText("");
        txtQty.setText("");
        txtItemCode.requestFocus();
        txtQty.setText("");
        this.itemDiscount = 0;

    }

    /**
     *
     * @param itemCode To be Searched in CartTabl
     * @param itemPrice To be Searched in CartTable which itemCode'price
     * @return Object array which size is 2 Index 1 indicate that this item code
     * does exist containing <code>true</code> if Index 1 is true then check
     * item price, if the item price already exist then Index 2 return itempPice
     * location of the table (in which row) in this row itemCode also does
     * exists.
     */
    protected Object[] dopriceAndItemCodeExist(String itemCode, String itemPrice) {

        int rowCount = tableModel.getRowCount();
        boolean exist = false;
        Object[] data = new Object[2];
        data[0] = false;
        data[1] = -1;

        for (int i = 0; i < rowCount; i++) {
            String code = tableModel.getValueAt(i, 0).toString();
            if (itemCode.equals(code)) {
                data[0] = true;
                String price = tableModel.getValueAt(i, 3).toString();
                if (price.equals(itemPrice)) {
                    data[1] = i;
                }
            }
        }
        return data;

    }

    private void setDetailToPayment() {
        FormPayment payment = new FormPayment(null, true);
        payment.subTotal = this.subTotal;
        payment.grandTotal = this.grandTotal;
        payment.discount = this.discount;
        payment.dueAmount = this.grandTotal;
        payment.orderItemModel = tableModel;
        payment.discountRemark = this.discount_remark;
        payment.setLocationRelativeTo(null);
        payment.setVisible(true);

    }

    public void resetAll() {
        txtItemCode.setText("");
        txtItemPrice.setText("");
        txtQty.setText("");
        txtItemCode.requestFocus();
        this.subTotal = 0;
        this.grandTotal = 0;
        this.discount = 0;
        tableModel.setRowCount(0);
        this.item = null;
        txtSubTotal.setText(Validator.BuildTwoDecimals(this.subTotal));
        txtGrandTotal.setText(Validator.BuildTwoDecimals(this.grandTotal));
        txtDiscount.setText(Validator.BuildTwoDecimals(this.discount));
    }

    private void deleteLine() {

        int selectedRow = tblItemCart.getSelectedRow();
        if (tblItemCart.isRowSelected(selectedRow)) {
            double total = Double.parseDouble(Validator.BuildTwoDecimals(Double.parseDouble(tblItemCart.getValueAt(selectedRow, 5).toString())));
            tableModel.removeRow(selectedRow);
            calculateTotal(-total);
            txtItemCode.requestFocus();

        } else {
            JOptionPane.showMessageDialog(null, "Please select a line to delete from invoice.", "No item selected", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void calculateTotal(double total) {
        this.subTotal += total;
        this.grandTotal += total;
        txtSubTotal.setText(Validator.BuildTwoDecimals(this.subTotal) + "");
        txtGrandTotal.setText(Validator.BuildTwoDecimals(this.grandTotal) + "");
    }

    /**
     * Hold current order.
     */
    private void holdCurrentOrder() {
        boolean isEmpty = holdOrderMap.isEmpty();

        if (isEmpty) {
            // iEmpty means that no any orders have been held so far.
            addCurentOrdertoHold();

        } else {
            // this codes commented because there is a button to retrieve current holding button.

            // order are alredy in hold positions. can view or add another order(item list) to hold

            /* int response = JOptionPane.showConfirmDialog(this, "<html>Would you like to hold current<br> "
             + "order ? then press yes,if you press no you<br>"
             + "will be able see currently holding order, if<br>"
             + " you want to cancel the operation press cancel.", "Hold Current Order", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);                    
             */
            // if (response == JOptionPane.YES_OPTION) {
            //order hold again.                
            addCurentOrdertoHold();

//            } else if (response == JOptionPane.NO_OPTION) {
//                OrderHoldView view = new OrderHoldView(this, true, holdOrderMap, this);
//                view.setLocationRelativeTo(this);
//                view.setVisible(true);
//            }
        }
    }

    private void addCurentOrdertoHold() {
        int rows = tableModel.getRowCount();
        if (rows > 0) {
            ArrayList<Object[]> holdItemList = new ArrayList<Object[]>();
            int rowCount = tableModel.getRowCount();
            int columnCount = tableModel.getColumnCount();
            // row count
            for (int i = 0; i < rowCount; i++) {
                Object[] datarow = new Object[columnCount];
                datarow[0] = tableModel.getValueAt(i, 0);
                datarow[1] = tableModel.getValueAt(i, 1);
                datarow[2] = tableModel.getValueAt(i, 2);
                datarow[3] = tableModel.getValueAt(i, 3);
                datarow[3] = tableModel.getValueAt(i, 4);
                datarow[4] = tableModel.getValueAt(i, 5);
                holdItemList.add(datarow);
            }
            resetAll();

            holdOrderMap.put(holdOrder_no, holdItemList);
            holdOrder_no++;  // */
            tableModel.setRowCount(0);
            JOptionPane.showMessageDialog(this, "Current Order now Hold.");
            txtItemCode.requestFocus();
        } else {
            JOptionPane.showMessageDialog(this, "No any items to be hold down.");
        }
    }

    /**
     * Retrieving Current holding order.
     */
    private void retrieveHoldingOrders() {
        boolean isempty = holdOrderMap.isEmpty();
        if (isempty) {
            JOptionPane.showMessageDialog(this, "Can not find any holding orders.");
            return;
        } else {
            FormViewHoldOrders view = new FormViewHoldOrders(null, true, holdOrderMap, this);
            view.setLocationRelativeTo(this);
            view.setVisible(true);
        }
    }

    public void viewHoldOrder() {
        int key = selectedHoldOrder_no;
        double total = 0;
        ArrayList<Object[]> get = holdOrderMap.get(key);
        for (Object[] data : get) {
            tableModel.addRow(data);
            total += Double.parseDouble(data[5].toString());

        }
        calculateTotal(total);
        holdOrderMap.remove(key);
        txtItemCode.requestFocus();
    }

    private void exit() {
        if (holdOrderMap.size() == 0) {
            if (tableModel.getRowCount() == 0) {
                this.dispose();
            } else {
                JOptionPane.showMessageDialog(this, "<html>There is some open bill found.<br>Please delete line(s) and try again</html>", "Opened bill found.", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "<html>There is " + holdOrderMap.size() + " hold orders.<br>Please settle or void that orders before exit.</html>", "Hold orders found", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void calculateDiscountForItem() {
        double price = Double.parseDouble(txtItemPrice.getText());
        double selling_margin = item.getSelling_margin();
        double qty = Double.parseDouble(txtQty.getText());
        double actualSellingPrice = 0;
        this.itemDiscount = 0;
        if (selling_margin > 0) {
            actualSellingPrice = item.getSellingPrice() - (item.getSellingPrice() * selling_margin / 100);
        } else {
            actualSellingPrice = item.getSellingPrice();
        }

        if (price < actualSellingPrice) {
            this.itemDiscount = (actualSellingPrice - price)*qty;
        }
    }
}
