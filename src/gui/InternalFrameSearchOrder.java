/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import backend_db.DBConection;
import backendcontrollers.CashBillController;
import backendcontrollers.OrderDetailController;
import backendcontrollers.OrderItemController;
import functions.DocCodeGenarate;
import functions.Information;
import functions.PrintBill;
import functions.ReadConfig;
import functions.Validator;
import static gui.FormMain.panelMain;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.print.PrintService;
import javax.print.PrintServiceLookup;
import javax.swing.AbstractAction;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import model.CashBill;
import model.OrderDetail;
import model.OrderItems;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRExporter;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRXmlDataSource;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.export.JRPrintServiceExporter;
import net.sf.jasperreports.engine.export.JRPrintServiceExporterParameter;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Sameera
 */
public class InternalFrameSearchOrder extends javax.swing.JInternalFrame {

    /**
     * Creates new form InternalFrameSearchOrder
     */
    private final DefaultTableModel tableModel;
    private final SimpleDateFormat dateFormat;

    static JRXmlDataSource jrxmlds;
    static JasperPrint jasperprint;
    static JasperDesign jasperdesign;
    static JasperReport jasperreport;

    public InternalFrameSearchOrder() {
        initComponents();

        this.setIconifiable(true);
        tableModel = (DefaultTableModel) tblOrders.getModel();
        tableModel.setRowCount(0);
        dateFormat = new SimpleDateFormat("yyyy-MM-dd");

        DefaultTableCellRenderer cellRenderer = new DefaultTableCellRenderer();

        cellRenderer.setHorizontalAlignment(JLabel.RIGHT);

        tblOrders.getColumnModel().getColumn(4).setCellRenderer(cellRenderer);
        tblOrders.getColumnModel().getColumn(5).setCellRenderer(cellRenderer);
        tblOrders.getColumnModel().getColumn(6).setCellRenderer(cellRenderer);

        cal_date.setDateFormat(dateFormat);

        itemSearchKeyRegister();
        searchOrder(dateFormat.format(new Date()), "order_date");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCalendarCombo2 = new org.freixas.jcalendar.JCalendarCombo();
        jPanel1 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        txtInvoiceNo = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblOrders = new javax.swing.JTable();
        btnAddToOrder = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        btnGenarateCashBill = new javax.swing.JButton();
        btnGenarateCashBill1 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        cal_date = new org.freixas.jcalendar.JCalendarCombo();

        setIconifiable(true);
        setTitle("Search Orders");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setText("Bill No :");

        txtInvoiceNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtInvoiceNoKeyReleased(evt);
            }
        });

        tblOrders.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tblOrders.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Bill No", "Date", "User", "Location", "Sub Total", "Discount", "Grand Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblOrders.setRowHeight(20);
        tblOrders.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblOrdersMouseClicked(evt);
            }
        });
        tblOrders.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblOrdersKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tblOrders);

        btnAddToOrder.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnAddToOrder.setForeground(new java.awt.Color(0, 51, 153));
        btnAddToOrder.setText("SELECT TO REFUND");
        btnAddToOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddToOrderActionPerformed(evt);
            }
        });

        btnCancel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnCancel.setForeground(new java.awt.Color(0, 51, 153));
        btnCancel.setText("CANCEL");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(153, 153, 255));
        jLabel2.setFont(new java.awt.Font("Courier New", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Search Orders");
        jLabel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabel2.setOpaque(true);

        btnGenarateCashBill.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnGenarateCashBill.setForeground(new java.awt.Color(0, 51, 153));
        btnGenarateCashBill.setText("GENARATE CASH BILL");
        btnGenarateCashBill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenarateCashBillActionPerformed(evt);
            }
        });

        btnGenarateCashBill1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnGenarateCashBill1.setForeground(new java.awt.Color(0, 51, 153));
        btnGenarateCashBill1.setText("BILL REPRINT");
        btnGenarateCashBill1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenarateCashBill1ActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setText("Date :");

        cal_date.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cal_datePopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        cal_date.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cal_dateActionPerformed(evt);
            }
        });
        cal_date.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                cal_datePropertyChange(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 148, Short.MAX_VALUE)
                        .addComponent(btnGenarateCashBill1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnGenarateCashBill)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAddToOrder)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cal_date, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(81, 81, 81)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtInvoiceNo, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jLabel2)
                .addGap(7, 7, 7)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel8)
                        .addComponent(txtInvoiceNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cal_date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jLabel9)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddToOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGenarateCashBill, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGenarateCashBill1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtInvoiceNoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtInvoiceNoKeyReleased
        // TODO add your handling code here:
        searchOrder(txtInvoiceNo.getText().trim(), "order_id");
    }//GEN-LAST:event_txtInvoiceNoKeyReleased

    private void tblOrdersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblOrdersMouseClicked
        // TODO add your handling code here:

        if (evt.getClickCount() == 2) {
            FormAuthorization auth = new FormAuthorization(null, true, "REF");
            auth.setLocationRelativeTo(this);
            auth.setVisible(true);
            if (auth.isConfirm) {
                selectToRefund();
            }
        }


    }//GEN-LAST:event_tblOrdersMouseClicked

    private void btnAddToOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddToOrderActionPerformed
        // TODO add your handling code here:
        try {
            int selectedRow = tblOrders.getSelectedRow();
            if (tblOrders.isRowSelected(selectedRow)) {
                ArrayList<OrderItems> searchOrders = OrderItemController.findThisOrder(tableModel.getValueAt(selectedRow, 0).toString());
                if (searchOrders.size() > 0) {
                    FormAuthorization auth = new FormAuthorization(null, true, "REF");
                    auth.setLocationRelativeTo(this);
                    auth.setVisible(true);
                    if (auth.isConfirm) {
                        selectToRefund();
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "No item(s) found..", "No items", JOptionPane.INFORMATION_MESSAGE);                    
                }

            } else {
                JOptionPane.showMessageDialog(null, "Please select a invoice..", "Invoice not select", JOptionPane.INFORMATION_MESSAGE);
                
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(InternalFrameSearchOrder.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(InternalFrameSearchOrder.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_btnAddToOrderActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        this.dispose();
        if (FormMain.searchOrder != null) {
            FormMain.searchOrder = null;
        }
    }//GEN-LAST:event_btnCancelActionPerformed

    private void tblOrdersKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblOrdersKeyPressed
        // TODO add your handling code here:

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            int selectedRow = tblOrders.getSelectedRow();
            if (tblOrders.isRowSelected(selectedRow)) {
                FormAuthorization auth = new FormAuthorization(null, true, "REF");
                auth.setLocationRelativeTo(this);
                auth.setVisible(true);
                if (auth.isConfirm) {
                    selectToRefund();
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please select a invoice..", "Invoice not select", JOptionPane.INFORMATION_MESSAGE);
            }

        }

    }//GEN-LAST:event_tblOrdersKeyPressed

    private void btnGenarateCashBillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenarateCashBillActionPerformed
        // TODO add your handling code here:

        int selectedRow = tblOrders.getSelectedRow();
        if (tblOrders.isRowSelected(selectedRow)) {
            int confirm = JOptionPane.showConfirmDialog(this, "Do you want to create cash bill for this invoice?", "Confirm", JOptionPane.YES_NO_OPTION);

            if (confirm == 0) {
                GenarateCashBill(selectedRow);
            }

        } else {
            JOptionPane.showMessageDialog(null, "Please select a invoice..", "Invoice not select", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnGenarateCashBillActionPerformed

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        // TODO add your handling code here:

    }//GEN-LAST:event_formInternalFrameOpened

    private void btnGenarateCashBill1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenarateCashBill1ActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblOrders.getSelectedRow();
        if (tblOrders.isRowSelected(selectedRow)) {
            int confirm = JOptionPane.showConfirmDialog(this, "Do you want to re-print this invoice?", "Confirm", JOptionPane.YES_NO_OPTION);

            if (confirm == 0) {
                String orderId = tblOrders.getValueAt(selectedRow, 0).toString();
                PrintBill.printInvoice(orderId);
            }

        } else {
            JOptionPane.showMessageDialog(null, "Please select a invoice..", "Invoice not select", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnGenarateCashBill1ActionPerformed

    private void cal_dateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cal_dateActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_cal_dateActionPerformed

    private void cal_datePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_cal_datePropertyChange
        // TODO add your handling code here:


    }//GEN-LAST:event_cal_datePropertyChange

    private void cal_datePopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cal_datePopupMenuWillBecomeInvisible
        // TODO add your handling code here:
        String date = dateFormat.format(cal_date.getDate());
        searchOrder(date, "order_date");
    }//GEN-LAST:event_cal_datePopupMenuWillBecomeInvisible


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddToOrder;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnGenarateCashBill;
    private javax.swing.JButton btnGenarateCashBill1;
    private org.freixas.jcalendar.JCalendarCombo cal_date;
    private org.freixas.jcalendar.JCalendarCombo jCalendarCombo2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblOrders;
    private javax.swing.JTextField txtInvoiceNo;
    // End of variables declaration//GEN-END:variables

    private void getAllOrders() {
        try {
            ArrayList<OrderDetail> allItems = OrderDetailController.getAllOrders();
            for (OrderDetail orderDetail : allItems) {
                Date date = dateFormat.parse(orderDetail.getOrderDate());
                Object row[] = {orderDetail.getOrderID(), dateFormat.format(date), orderDetail.getUserID(), orderDetail.getLocation(),
                    Validator.BuildTwoDecimals(orderDetail.getSubTotal()),
                    Validator.BuildTwoDecimals(orderDetail.getOrderDiscount()), Validator.BuildTwoDecimals(orderDetail.getGrandTotal())};
                tableModel.addRow(row);
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(InternalFrameSearchOrder.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(InternalFrameSearchOrder.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(InternalFrameSearchOrder.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void itemSearchKeyRegister() {
        AbstractAction selectAction = new AbstractAction("") {

            @Override
            public void actionPerformed(ActionEvent ae) {

                tblOrders.requestFocus();
                tblOrders.setRowSelectionInterval(0, 0);

            }
        };
        AbstractAction searchAction = new AbstractAction("") {

            @Override
            public void actionPerformed(ActionEvent ae) {

                txtInvoiceNo.requestFocus();
                txtInvoiceNo.selectAll();

            }
        };

        AbstractAction enterAction = new AbstractAction("") {

            @Override
            public void actionPerformed(ActionEvent ae) {
                selectToRefund();

            }
        };
        tblOrders.registerKeyboardAction(selectAction, KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, 0), JComponent.WHEN_IN_FOCUSED_WINDOW);
        tblOrders.registerKeyboardAction(searchAction, KeyStroke.getKeyStroke(KeyEvent.VK_F5, 0), JComponent.WHEN_IN_FOCUSED_WINDOW);
        tblOrders.registerKeyboardAction(enterAction, KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), JComponent.WHEN_FOCUSED);
    }

    private void searchOrder(String orderId, String searchBy) {
        tableModel.setRowCount(0);
        try {

            ArrayList<OrderDetail> searchOrders = OrderDetailController.searchOrders(orderId, searchBy);
            for (OrderDetail orderDetail : searchOrders) {
                Date date = dateFormat.parse(orderDetail.getOrderDate());
                tableModel.addRow(new Object[]{orderDetail.getOrderID(), dateFormat.format(date), orderDetail.getUserID(), orderDetail.getLocation(),
                    Validator.BuildTwoDecimals(orderDetail.getSubTotal()),
                    Validator.BuildTwoDecimals(orderDetail.getOrderDiscount()), Validator.BuildTwoDecimals(orderDetail.getGrandTotal())});
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(InternalFrameSearchOrder.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(InternalFrameSearchOrder.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(InternalFrameSearchOrder.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void selectToRefund() {

        int selectedRow = tblOrders.getSelectedRow();
        if (FormMain.searchOrder != null) {
            if (FormMain.searchOrder.isVisible()) {
                FormMain.searchOrder.setVisible(false);
                InternalFrameRefund.orderId = tableModel.getValueAt(selectedRow, 0).toString();
                InternalFrameRefund.billTotal = Validator.BuildTwoDecimals(Double.parseDouble(tableModel.getValueAt(selectedRow, 4).toString())+Double.parseDouble(tableModel.getValueAt(selectedRow, 5).toString()));
                InternalFrameRefund refundOrder = new InternalFrameRefund();

                refundOrder.setSize(panelMain.getSize());
                FormMain.panelMain.add(refundOrder);
                refundOrder.setVisible(true);
            }
        }
//            InternalFrameRefund refundOrder = new InternalFrameRefund();
//            refundOrder.orderId = tableModel.getValueAt(selectedRow, 0).toString();
//            refundOrder.billTotal = Validator.BuildTwoDecimals(Double.parseDouble(tableModel.getValueAt(selectedRow, 6).toString()));
//            refundOrder.setVisible(true);

    }

    private void GenarateCashBill(int selectedRow) {
        try {
            CashBill cashBill = new CashBill();
            String orderId = tableModel.getValueAt(selectedRow, 0).toString();

            boolean isHas = CashBillController.isHasGenaratedCashBill(orderId);
            if (!isHas) {
                double billTotal = Double.parseDouble(tableModel.getValueAt(selectedRow, 6).toString());
                String cashBillNo = DocCodeGenarate.getCode("CB");
                String date = FormMain.lblDate.getText();
                String userID = Information.intilzeInformation().getUserID();

                cashBill.setInvoiceNo(orderId);
                cashBill.setCashBillNo(cashBillNo);
                cashBill.setSettle(0);
                cashBill.setTrnDate(date);
                cashBill.setUser(userID);
                cashBill.setAmount(billTotal);
                int insert = CashBillController.InsertNewCashBIll(cashBill);
                if (insert == 1) {
                    PrintCashBill(orderId);
                    JOptionPane.showMessageDialog(this, "Successfully genarated Cash bill ..");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Already genarated cash bill for Selected invoice.. ", "Found cash bill", JOptionPane.WARNING_MESSAGE);

            }

        } catch (SQLException ex) {
            Logger.getLogger(InternalFrameSearchOrder.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(InternalFrameSearchOrder.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void PrintCashBill(String invoiceNo) {
        try {

            double orderDiscount = OrderDetailController.getOrderDiscount(invoiceNo);

            String reportPath = "";
            String logo_path = Information.PROJECT_LOCATION + "\\picture\\logo\\logo.png";
            Map map = new HashMap();
            map.put("billNo", invoiceNo);
            map.put("logo_path", logo_path);

            reportPath = Information.PROJECT_LOCATION + "\\Reports\\CashBill.jrxml";

            System.out.println("report path :" + reportPath);
            jasperdesign = JRXmlLoader.load(reportPath);
            jasperreport = JasperCompileManager.compileReport(jasperdesign);
            jasperprint = JasperFillManager.fillReport(jasperreport, map, DBConection.getConnection());

            PrintService ser1 = PrintServiceLookup.lookupDefaultPrintService();

            JRExporter jre = new JRPrintServiceExporter();
            jre.setParameter(JRExporterParameter.JASPER_PRINT, jasperprint);
            jre.setParameter(JRPrintServiceExporterParameter.PRINT_SERVICE_ATTRIBUTE_SET, ser1.getAttributes());
            jre.setParameter(JRPrintServiceExporterParameter.PRINT_SERVICE_ATTRIBUTE_SET, ser1.getAttributes());
            jre.setParameter(JRPrintServiceExporterParameter.DISPLAY_PAGE_DIALOG, false);
            jre.setParameter(JRPrintServiceExporterParameter.DISPLAY_PRINT_DIALOG, false);
            jre.exportReport();

            if (ReadConfig.printBill == 0) {
                JasperViewer.viewReport(jasperprint, false);

            }

        } catch (JRException ex) {
            Logger.getLogger(FormPayment.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FormPayment.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(FormPayment.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

}
