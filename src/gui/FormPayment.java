/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import backend_db.ConnectionControll;
import backend_db.DBConection;
import backendcontrollers.CashBillController;
import backendcontrollers.GrnController;
import backendcontrollers.OrderDetailController;
import backendcontrollers.OrderItemController;
import backendcontrollers.OrderPaymentController;
import backendcontrollers.PaymentDetailController;
import functions.DocNumGenerator;
import functions.Information;
import functions.PrintBill;
import functions.ReadConfig;
import functions.UpdateQuentities;
import functions.Validator;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import model.BinCard;
import model.CashBill;
import model.OrderDetail;
import model.OrderItems;
import model.OrderPayment;

/**
 *
 * @author Sameera
 */
public class FormPayment extends javax.swing.JDialog {

    /**
     * Creates new form FormItemSearch
     */
    public static double subTotal;
    public static double grandTotal;
    public static double discount;
    public static double paidAmount;
    public static double dueAmount;
    public static double balance;
    public static DefaultTableModel tableModel;
    public DefaultTableModel orderItemModel;
    private String orderId;
    public static String discountRemark = "";

    static ArrayList creditCustomer;

    public FormPayment(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        tableModel = (DefaultTableModel) tbl_payment.getModel();

        DefaultTableCellRenderer cellRenderer = new DefaultTableCellRenderer();
        cellRenderer.setHorizontalAlignment(JLabel.RIGHT);
        tbl_payment.getColumnModel().getColumn(1).setCellRenderer(cellRenderer);
    }

    public FormPayment() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnPay = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        txtSubTotal = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtDiscount = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtGrandTotal = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        cmb_payType = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        txtPaid = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtDue = new javax.swing.JTextField();
        txtBalance = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbl_payment = new javax.swing.JTable();
        btnCancel = new javax.swing.JButton();
        check_printInvoice = new javax.swing.JCheckBox();
        txtRecived = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);
        setUndecorated(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 102, 204), 2));

        btnPay.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        btnPay.setForeground(new java.awt.Color(0, 51, 153));
        btnPay.setText("PAY");
        btnPay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPayActionPerformed(evt);
            }
        });
        btnPay.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnPayKeyPressed(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(153, 153, 255));
        jLabel2.setFont(new java.awt.Font("Courier New", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Payments");
        jLabel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabel2.setOpaque(true);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 102, 204)), "Order Summery", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Agency FB", 1, 18), new java.awt.Color(0, 102, 204))); // NOI18N

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 51, 153));
        jLabel9.setText("Sub Total     ");

        txtSubTotal.setEditable(false);
        txtSubTotal.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        txtSubTotal.setForeground(new java.awt.Color(102, 0, 0));
        txtSubTotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtSubTotal.setText("2000.00");
        txtSubTotal.setBorder(null);
        txtSubTotal.setOpaque(false);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 51, 153));
        jLabel10.setText("Total Discount ");

        txtDiscount.setEditable(false);
        txtDiscount.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        txtDiscount.setForeground(new java.awt.Color(102, 0, 0));
        txtDiscount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtDiscount.setText("200.00");
        txtDiscount.setBorder(null);
        txtDiscount.setOpaque(false);

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 26)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 51, 153));
        jLabel11.setText("Grand Total");

        txtGrandTotal.setEditable(false);
        txtGrandTotal.setFont(new java.awt.Font("Tahoma", 1, 26)); // NOI18N
        txtGrandTotal.setForeground(new java.awt.Color(102, 0, 0));
        txtGrandTotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtGrandTotal.setText("1800.00");
        txtGrandTotal.setBorder(null);
        txtGrandTotal.setOpaque(false);

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(0, 51, 153));
        jLabel12.setText(":");

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(0, 51, 153));
        jLabel13.setText(":");

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 26)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(0, 51, 153));
        jLabel14.setText(":");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(95, 95, 95)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE))
                        .addGap(8, 8, 8))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(jLabel14))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtGrandTotal, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                            .addComponent(txtDiscount, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, Short.MAX_VALUE)
                        .addComponent(txtSubTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel10, jLabel11});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtSubTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtGrandTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel10, jLabel11, jLabel9});

        jLabel1.setFont(new java.awt.Font("Serif", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 51, 153));
        jLabel1.setText("Pay Type   :");

        cmb_payType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmb_payType.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cmb_payTypePopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        jLabel3.setFont(new java.awt.Font("Serif", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 51, 153));
        jLabel3.setText("Amount Paid :");

        txtPaid.setEditable(false);
        txtPaid.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        txtPaid.setForeground(new java.awt.Color(102, 0, 0));
        txtPaid.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtPaid.setText("0.00");
        txtPaid.setBorder(null);

        jLabel4.setFont(new java.awt.Font("Serif", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 51, 153));
        jLabel4.setText("Amount Due  :");

        jLabel5.setFont(new java.awt.Font("Serif", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 51, 153));
        jLabel5.setText("         Balance :");

        txtDue.setEditable(false);
        txtDue.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        txtDue.setForeground(new java.awt.Color(102, 0, 0));
        txtDue.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtDue.setText("0.00");
        txtDue.setBorder(null);

        txtBalance.setEditable(false);
        txtBalance.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        txtBalance.setForeground(new java.awt.Color(102, 0, 0));
        txtBalance.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtBalance.setText("0.00");
        txtBalance.setBorder(null);

        jLabel6.setFont(new java.awt.Font("Serif", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 51, 153));
        jLabel6.setText("Recived :");

        tbl_payment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Payment Type", "paid Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbl_payment.setRowHeight(30);
        tbl_payment.setRowMargin(0);
        tbl_payment.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tbl_paymentKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(tbl_payment);
        if (tbl_payment.getColumnModel().getColumnCount() > 0) {
            tbl_payment.getColumnModel().getColumn(1).setPreferredWidth(30);
        }

        btnCancel.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        btnCancel.setForeground(new java.awt.Color(0, 51, 153));
        btnCancel.setText("CANCEL");
        btnCancel.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0),"Esc");

        btnCancel.getActionMap().put("Esc", new AbstractAction() {

            @Override
            public void actionPerformed(ActionEvent e) {
                btnCancel.doClick();
            }
        });
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        check_printInvoice.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        check_printInvoice.setForeground(new java.awt.Color(153, 0, 51));
        check_printInvoice.setSelected(true);
        check_printInvoice.setText("Print Bill");

        txtRecived.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        txtRecived.setForeground(new java.awt.Color(102, 0, 0));
        txtRecived.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtRecived.setText("0.00");
        txtRecived.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtRecivedKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtRecivedKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 646, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cmb_payType, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtBalance))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtDue, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtRecived))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtPaid, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(check_printInvoice, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnPay, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                            .addComponent(cmb_payType))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                            .addComponent(txtRecived, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPaid, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtDue, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(5, 5, 5)))
                        .addGap(5, 5, 5)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtBalance, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4))))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPay, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(check_printInvoice))
                .addGap(25, 25, 25))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {txtBalance, txtDue, txtPaid});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel1, jLabel3, jLabel4, jLabel5, jLabel6});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPayActionPerformed
        // TODO add your handling code here:
        proceedPayment();

    }//GEN-LAST:event_btnPayActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        try {
            // TODO add your handling code here:
            ArrayList<String> paymentTypeList = PaymentDetailController.getPaymentType();
            cmb_payType.removeAllItems();
            int index = 0;
            for (String payType : paymentTypeList) {
                cmb_payType.insertItemAt(payType.trim(), index);
                index++;
            }
            cmb_payType.setSelectedIndex(0);
        } catch (SQLException ex) {
            Logger.getLogger(FormPayment.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FormPayment.class.getName()).log(Level.SEVERE, null, ex);
        }

        txtSubTotal.setText(Validator.BuildTwoDecimals(this.subTotal) + "");
        txtGrandTotal.setText(Validator.BuildTwoDecimals(this.grandTotal) + "");
        txtDiscount.setText(Validator.BuildTwoDecimals(this.discount) + "");
        txtBalance.setText(Validator.BuildTwoDecimals(this.balance) + "");
        txtRecived.setText("0.00");
        txtDue.setText(Validator.BuildTwoDecimals(this.dueAmount) + "");
        txtPaid.setText(Validator.BuildTwoDecimals(this.paidAmount) + "");
        txtRecived.setText(Validator.BuildTwoDecimals(this.grandTotal) + "");
        txtRecived.selectAll();
        txtRecived.requestFocus();

        if (ReadConfig.printBill == 1) {
            check_printInvoice.setSelected(true);
        } else {
            check_printInvoice.setSelected(false);
        }

    }//GEN-LAST:event_formWindowOpened

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        reset();
        this.dispose();

    }//GEN-LAST:event_btnCancelActionPerformed


    private void tbl_paymentKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbl_paymentKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            if (tbl_payment.getRowCount() > 0) {
                int selectedRow = tbl_payment.getSelectedRow();
                if (tbl_payment.isRowSelected(selectedRow)) {
                    String selectTotal = tbl_payment.getValueAt(selectedRow, 1).toString();

                    String selectType = tbl_payment.getValueAt(selectedRow, 0).toString();
                    double recived = Double.parseDouble(Validator.BuildTwoDecimals(Double.parseDouble(selectTotal)));
                    calculateBalance(-recived);

                    if (selectType.contains("Credit to - ")) {
                        String cusCode = tbl_payment.getValueAt(selectedRow, 0).toString().split("-")[1];
                        boolean remove = creditCustomer.remove(cusCode + "--" + Validator.BuildTwoDecimals(Double.parseDouble(selectTotal)));
                        System.out.println("remove from credit list " + remove);
                    }
                    tableModel.removeRow(selectedRow);
                }
            }
        }
    }//GEN-LAST:event_tbl_paymentKeyPressed

    private void cmb_payTypePopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cmb_payTypePopupMenuWillBecomeInvisible
        // TODO add your handling code here:
        String payType = cmb_payType.getSelectedItem().toString();
        if (payType.equalsIgnoreCase("CREDIT")) {
            if (this.dueAmount > 0) {
                FormCustomer customer = new FormCustomer(null, false, false);
                customer.invoiceAmount = this.grandTotal;
                customer.setLocationRelativeTo(null);
                customer.setEnabled(true);
                customer.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(this, "No due amount for credit", "No due amount", JOptionPane.INFORMATION_MESSAGE);
            }

        } else if (payType.equalsIgnoreCase("CASH BILL")) {
            FormSelectCashBill cashBill = new FormSelectCashBill(null, false, false);
            cashBill.invoiceAmount = this.grandTotal;
            cashBill.setLocationRelativeTo(null);
            cashBill.setEnabled(true);
            cashBill.setVisible(true);
        }
        txtRecived.requestFocus();
        txtRecived.selectAll();
    }//GEN-LAST:event_cmb_payTypePopupMenuWillBecomeInvisible

    private void txtRecivedKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRecivedKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            double recived = Double.parseDouble(txtRecived.getText());
            calculateBalance(recived);
        }
    }//GEN-LAST:event_txtRecivedKeyPressed

    private void txtRecivedKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRecivedKeyTyped
        // TODO add your handling code here:
        Validator.DigitsValitor(evt);
    }//GEN-LAST:event_txtRecivedKeyTyped

    private void btnPayKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnPayKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            proceedPayment();
        }
    }//GEN-LAST:event_btnPayKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    public static javax.swing.JButton btnPay;
    private javax.swing.JCheckBox check_printInvoice;
    public static javax.swing.JComboBox cmb_payType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tbl_payment;
    public static javax.swing.JTextField txtBalance;
    private javax.swing.JTextField txtDiscount;
    public static javax.swing.JTextField txtDue;
    private javax.swing.JTextField txtGrandTotal;
    public static javax.swing.JTextField txtPaid;
    public static javax.swing.JTextField txtRecived;
    private javax.swing.JTextField txtSubTotal;
    // End of variables declaration//GEN-END:variables

    public static void calculateBalance(double recived) {
        txtRecived.setText("");
        paidAmount += recived;
        txtPaid.setText(Validator.BuildTwoDecimals(paidAmount));

        if (paidAmount > grandTotal) {
            dueAmount = 0.00;
            txtRecived.setEditable(false);
        } else {
            txtRecived.setEditable(true);
            dueAmount = grandTotal - paidAmount;
        }

        txtDue.setText(Validator.BuildTwoDecimals(dueAmount));

        balance = paidAmount - grandTotal;
        //if (balance > 0) {
        txtBalance.setText(Validator.BuildTwoDecimals(balance));
        //  }
        String payMethod = cmb_payType.getSelectedItem().toString();
        if (!payMethod.equalsIgnoreCase("Credit") && !payMethod.equalsIgnoreCase("CASH BILL")) {
            if (recived > 0) {
                setPaymentMethod(payMethod, recived);
            }
        }

        if (dueAmount > 0) {
            txtRecived.requestFocus();
        } else {
            txtRecived.setEditable(false);
            btnPay.requestFocus();
        }
    }

    private void settleBill() {
        try {
            String orderId = genarateOrderId();
            this.orderId = orderId;
            OrderDetail order = new OrderDetail();
            order.setLocation(Information.intilzeInformation().getLocation_code());
            order.setOrderID(orderId);
            order.setGrandTotal(this.grandTotal);
            order.setSubTotal(this.subTotal);
            order.setOrderDate(FormBilling.lblDate.getText());
            order.setOrderDiscount(this.discount);
            order.setItemCount(this.orderItemModel.getRowCount());
            order.setOrderStatus(1);
            order.setPaidAmount(this.paidAmount);
            order.setRemarks("");
            order.setDiscountRemark(this.discountRemark);
            order.setUserID(Information.intilzeInformation().getUserID());
            int insertOredrDetail = OrderDetailController.insertOredrDetail(order);
            if (insertOredrDetail == 1) {
                saveOrderItems(orderId);
                insertpaymentDetails();
                insertCreditPayment();
                if (check_printInvoice.isSelected()) {
                    PrintBill.printInvoice(this.orderId);
                }
                JOptionPane.showMessageDialog(this, "Bill successfully saved..");
                FormBilling.itemDiscountRemarkMap = new HashMap<Integer, String>();
            }

        } catch (SQLException ex) {
            Logger.getLogger(FormPayment.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FormPayment.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public static void setPaymentMethod(String payMethod, double recived) {
        int rowCount = tableModel.getRowCount();
        if (rowCount > 0) {
            Object[] payTypeExsist = isPayTypeExsist(payMethod);
            if ((Boolean) payTypeExsist[0]) {
                double exsistValue = Double.parseDouble(tableModel.getValueAt((Integer) payTypeExsist[1], 1).toString());
                double totalPaid = recived + exsistValue;
                tableModel.setValueAt(Validator.BuildTwoDecimals(totalPaid), (Integer) payTypeExsist[1], 1);
            } else {
                tableModel.addRow(new Object[]{payMethod, Validator.BuildTwoDecimals(recived)});
            }
        } else {
            tableModel.addRow(new Object[]{payMethod, Validator.BuildTwoDecimals(recived)});
        }
    }

    public static Object[] isPayTypeExsist(String payType) {

        int rowCount = tableModel.getRowCount();
        Object[] data = new Object[2];
        data[0] = false;
        data[1] = -1;

        for (int i = 0; i < rowCount; i++) {
            String payMethod = tableModel.getValueAt(i, 0).toString();
            if (payType.equals(payMethod)) {
                data[0] = true;
                data[1] = i;
            }
        }
        return data;
    }

    public static void setCreditPayment(String cusCode, String name) {
        creditCustomer = new ArrayList();

        int rowCount = tableModel.getRowCount();
        if (rowCount > 0) {
            Object[] payTypeExsist = isPayTypeExsist("Credit to - " + cusCode + "-" + name);
            if ((Boolean) payTypeExsist[0]) {
                double exsistValue = Double.parseDouble(tableModel.getValueAt((Integer) payTypeExsist[1], 1).toString());
                double totalPaid = dueAmount + exsistValue;
                tableModel.setValueAt(Validator.BuildTwoDecimals(totalPaid), (Integer) payTypeExsist[1], 1);
                creditCustomer.add(cusCode + "--" + Validator.BuildTwoDecimals(totalPaid));

            } else {
                tableModel.addRow(new Object[]{"Credit to - " + cusCode + "-" + name, Validator.BuildTwoDecimals(dueAmount)});
                creditCustomer.add(cusCode + "--" + Validator.BuildTwoDecimals(dueAmount));
            }
        } else {
            tableModel.addRow(new Object[]{"Credit to - " + cusCode + "-" + name, Validator.BuildTwoDecimals(dueAmount)});
            creditCustomer.add(cusCode + "--" + Validator.BuildTwoDecimals(dueAmount));
        }
        calculateBalance(dueAmount);
        System.out.println("credit list :" + creditCustomer.get(0).toString());
    }

    public static void setCashBillPayment(String cashBillNo, double recived) {

        String payType = cmb_payType.getSelectedItem().toString();
        int rowCount = tableModel.getRowCount();
        if (rowCount > 0) {
            Object[] payTypeExsist = isPayTypeExsist(payType + "-" + cashBillNo);
            if ((Boolean) payTypeExsist[0]) {
                double exsistValue = Double.parseDouble(tableModel.getValueAt((Integer) payTypeExsist[1], 1).toString());
                double totalPaid = recived + exsistValue;
                tableModel.setValueAt(Validator.BuildTwoDecimals(totalPaid), (Integer) payTypeExsist[1], 1);

            } else {
                tableModel.addRow(new Object[]{payType + "-" + cashBillNo, Validator.BuildTwoDecimals(recived)});
            }
        } else {
            tableModel.addRow(new Object[]{payType + "-" + cashBillNo, Validator.BuildTwoDecimals(recived)});

        }
        calculateBalance(recived);

    }

    private String genarateOrderId() throws SQLException {
        DocNumGenerator doc = new DocNumGenerator();

        doc.methodNumGen("OD");
        String id = doc.getDocChar();
        int docNumber = doc.getDocNumber();
        return id + docNumber;
    }

    private void saveOrderItems(String orderId) {
        int rowCount = orderItemModel.getRowCount();
        OrderItems items = new OrderItems();
        BinCard binCard = null;
        if (rowCount > 0) {
            for (int i = 0; i < rowCount; i++) {
                try {
                    items = new OrderItems();
                    items.setOrderId(orderId);
                    double qty = Double.parseDouble(orderItemModel.getValueAt(i, 2).toString());
                    double price = Double.parseDouble(orderItemModel.getValueAt(i, 3).toString());
                    items.setItemCode(orderItemModel.getValueAt(i, 0).toString());
                    items.setItemName(orderItemModel.getValueAt(i, 1).toString());
                    items.setItemQty(qty);
                    items.setItemPrice(price);
                    items.setTotalValue(qty * price);
                    items.setItemDiscount(Double.parseDouble(orderItemModel.getValueAt(i, 4).toString()));
                    items.setTotalValueWithDiscount(Double.parseDouble(orderItemModel.getValueAt(i, 5).toString()));
                    items.setItemStatus(1);
                    String discountRemark = FormBilling.itemDiscountRemarkMap.get(i);
                    items.setDiscount_remark(discountRemark);
                    items.setTrn_date(FormBilling.lblDate.getText());
                    int isItemsAdded = OrderItemController.addThisOrder(items);

                    binCard = new BinCard();
                    binCard.setIssueId(orderId);
                    binCard.setDate(functions.DateFormat.getDate(FormBilling.lblDate.getText()));
                    binCard.setTime(functions.DateFormat.getTime(FormBilling.lblTime.getText()));
                    binCard.setIssueQty(qty);
                    binCard.setIssueTo("-");
                    binCard.setItemCode(orderItemModel.getValueAt(i, 0).toString());
                    binCard.setLocation(Information.intilzeInformation().getLocation_code());
                    binCard.setStockEditID("-");
                    binCard.setRecivedID("-");
                    binCard.setRecivedFrom("-");
                    if (isItemsAdded == 1) {
                        GrnController.insertDataToBinCard(binCard,0);
                        UpdateQuentities.updateItemQuantities(orderItemModel.getValueAt(i, 0).toString(), qty);
                    }
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(FormPayment.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(FormPayment.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ParseException ex) {
                    Logger.getLogger(FormPayment.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    private void resetAll() {
        FormPayment.subTotal = 0.00;
        FormPayment.grandTotal = 0.00;
        FormPayment.discount = 0.00;
        FormPayment.paidAmount = 0.00;
        FormPayment.balance = 0.00;
        FormPayment.dueAmount = 0.00;
        this.orderItemModel = null;
        this.orderId = null;
        this.discountRemark = "";
        FormBilling.subTotal = 0.00;
        FormBilling.grandTotal = 0.00;
        FormBilling.discount = 0.00;
        FormBilling.tableModel.setRowCount(0);
        FormBilling.item = null;
        FormBilling.txtItemCode.requestFocus();
        FormBilling.txtSubTotal.setText("0.00");
        FormBilling.txtDiscount.setText("0.00");
        FormBilling.txtGrandTotal.setText("0.00");
        this.creditCustomer = null;
    }

    private void reset() {
        FormPayment.subTotal = 0.00;
        FormPayment.grandTotal = 0.00;
        FormPayment.discount = 0.00;
        FormPayment.paidAmount = 0.00;
        FormPayment.balance = 0.00;
        FormPayment.dueAmount = 0.00;
        this.orderItemModel = null;
        this.orderId = null;
        this.creditCustomer = null;
        this.discountRemark = "";

    }

    private void insertCreditPayment() {
        if (creditCustomer != null) {
            if (creditCustomer.size() > 0) {
                try {
                    String cus_code = creditCustomer.get(0).toString().split("--")[0];
                    double amount = Double.parseDouble(creditCustomer.get(0).toString().split("--")[1]);
                    String query = "INSERT INTO CreditInvoice\n"
                            + "           (order_id\n"
                            + "           ,CustomerCode\n"
                            + "           ,OrderDate\n"
                            + "           ,CreditAmount\n"
                            + "           ,DueAmount\n"
                            + "           ,Status)\n"
                            + "     VALUES\n"
                            + "           ('" + this.orderId + "','" + cus_code + "','" + FormBilling.lblDate.getText() + "','" + amount + "','" + amount + "','0')";
                    ConnectionControll.setData(query, DBConection.getConnection());
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(FormPayment.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(FormPayment.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

    }

    private void insertpaymentDetails() throws ClassNotFoundException, SQLException {
        int rowCount = tableModel.getRowCount();
        OrderPayment payment = null;
        for (int i = 0; i < rowCount; i++) {
            String payType = tableModel.getValueAt(i, 0).toString();
            String amount = Validator.BuildTwoDecimals(Double.parseDouble(tableModel.getValueAt(i, 1).toString()));
            if (!payType.contains("Credit to - ") && !payType.contains("CASH BILL")) {

                payment = new OrderPayment();
                payment.setOrderID(this.orderId);
                payment.setPaymentType(payType);
                payment.setAmount(Double.parseDouble(amount));
                payment.setCashBillNo("");
                payment.setCreditTo("");
                OrderPaymentController.insertOrderPayment(payment);
            } else if (payType.contains("Credit to - ")) {
                String creditTo = payType.split("-")[1];
                payment = new OrderPayment();
                payment.setOrderID(this.orderId);
                payment.setPaymentType("CREDIT");
                payment.setAmount(Double.parseDouble(amount));
                payment.setCashBillNo("");
                payment.setCreditTo(creditTo);
                OrderPaymentController.insertOrderPayment(payment);
            } else if (payType.contains("CASH BILL")) {
                payment = new OrderPayment();
                payment.setOrderID(this.orderId);
                payment.setPaymentType("CASH BILL");
                payment.setAmount(Double.parseDouble(amount));
                String cashBillNo = payType.split("-")[1];
                payment.setCashBillNo(cashBillNo);
                payment.setCreditTo("");
                OrderPaymentController.insertOrderPayment(payment);
                CashBill cashBill = new CashBill();
                cashBill.setSettle(1);
                cashBill.setCashBillNo(cashBillNo);
                CashBillController.updateCashBillStatus(cashBill);
            }
        }
    }

    private void proceedPayment() {
        if (tableModel.getRowCount() > 0) {
            settleBill();
            resetAll();
            this.dispose();
        } else {
            JOptionPane.showMessageDialog(this, "No payment found..please make payment for settle", "No payment", JOptionPane.INFORMATION_MESSAGE);
        }
    }

}
